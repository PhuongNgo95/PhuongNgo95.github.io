package DAO;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import BEAN.Users;
import DB.DBconnection;

public class UserDAO {
	public static List<Users> findAllUser() throws Exception{
		Connection conn = DBconnection.DBconnection();
		PreparedStatement ptmt = null;
		List<Users> list = new ArrayList<Users>();

		String sql = "select * from user";

			ptmt = conn.prepareStatement(sql);
			ResultSet rs = ptmt.executeQuery();

			while (rs.next()) {
				Users users = new Users();
				users.setId(rs.getInt("id"));
				users.setName(rs.getString("name"));
				users.setEmail(rs.getString("email"));
				users.setPhoneNumber(rs.getString("phoneNumber"));
				list.add(users);
			}
			ptmt.close();
		return list;
	}

	public static Users findId(Users users) throws Exception{
		Connection conn = DBconnection.DBconnection();
		PreparedStatement ptmt = null;
		Users usersResponse = new Users();

		String sql = "select * from user where id = ?";

			ptmt = conn.prepareStatement(sql);
			ptmt.setInt(1, users.getId());
			ResultSet rs = ptmt.executeQuery();

			while (rs.next()) {
				users.setId(rs.getInt("id"));
				users.setName(rs.getString("name"));
				users.setEmail(rs.getString("email"));
				users.setPhoneNumber(rs.getString("phoneNumber"));
				return usersResponse;
			}
			ptmt.close();
		return usersResponse;
	}

	public static boolean checkName(Users users) throws Exception{
		Connection conn = DBconnection.DBconnection();
		PreparedStatement ptmt = null;

		boolean rowInserted = false;
		String sql = "select * from user where name = ?";

			ptmt = conn.prepareStatement(sql);
			ptmt.setString(1, users.getName());
			rowInserted = ptmt.executeUpdate() > 0;
			ptmt.close();
		return rowInserted;
	}
	
	public static boolean insertUser(Users users) throws Exception{
		Connection conn = DBconnection.DBconnection();
		PreparedStatement ptmt = null;

		boolean rowInserted = false;
		String sql = "insert into user (name, email, phoneNumber) VALUES (?, ?, ?) ";

			ptmt = conn.prepareStatement(sql);
			ptmt.setString(1, users.getName());
			ptmt.setString(2, users.getEmail());
			ptmt.setString(3, users.getPhoneNumber());
			rowInserted = ptmt.executeUpdate() > 0;
			ptmt.close();
		return rowInserted;
	}
	
	public static boolean updateUser(Users users) throws Exception{
		Connection conn = DBconnection.DBconnection();
		PreparedStatement ptmt = null;

		boolean rowUpdateted = false;
		String sql = "update user set name = ?, email = ?, phoneNumber = ? where id = ? ";

			ptmt = conn.prepareStatement(sql);
			ptmt.setString(1, users.getName());
			ptmt.setString(2, users.getEmail());
			ptmt.setString(3, users.getPhoneNumber());
			ptmt.setInt(4, users.getId());
			rowUpdateted = ptmt.executeUpdate() > 0;
			ptmt.close();
		return rowUpdateted;
	}
	
	public static boolean deleteUser(Users users) throws Exception{
		Connection conn = DBconnection.DBconnection();
		PreparedStatement ptmt = null;

		boolean rowDeleted = false;
		String sql = "delete from user where id = ? ";

			ptmt = conn.prepareStatement(sql);
			ptmt.setInt(1, users.getId());
			rowDeleted = ptmt.executeUpdate() > 0;
			ptmt.close();
		return rowDeleted;
	}
}
